import os
import hashlib
import tkinter as tk
from tkinter import messagebox

# ✅ Load multiple hash databases safely
def load_hash_database(hash_files=None):
    if hash_files is None:
        hash_files = [
            r"C:\Users\Admin\Desktop\BitLink\pius alter\DataBase\hashes.txt",
            r"C:\Users\Admin\Desktop\BitLink\pius alter\DataBase\md5hash.UNIBIT"
        ]

    malicious_hashes = {}

    for hash_file in hash_files:
        if not os.path.exists(hash_file):
            print(f"⚠ Warning: Hash file '{hash_file}' not found. Skipping...")  # ✅ Print instead of messagebox
            continue  

        try:
            with open(hash_file, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if not line:
                        continue

                    parts = line.split(",", 1)
                    hash_value = parts[0].strip()
                    malware_name = parts[1].strip() if len(parts) == 2 else "Unknown Malware"

                    malicious_hashes[hash_value] = malware_name

            print(f"✅ Loaded {len(malicious_hashes)} hashes from '{hash_file}'")
        except Exception as e:
            print(f"❌ Error loading '{hash_file}': {e}")  # ✅ Avoids blocking UI with popups

    return malicious_hashes

# ✅ Load hashes once
# ✅ Load hashes once
MALICIOUS_HASHES = load_hash_database()



# ✅ Debugging: Print loaded hashes


def calculate_file_hash(file_path):
    """Calculate MD5 hash of a file, handling errors properly."""
    try:
        with open(file_path, "rb") as f:
            file_hash = hashlib.md5()
            while chunk := f.read(4096):
                file_hash.update(chunk)
            return file_hash.hexdigest()
    except Exception as e:
        print(f"❌ Error reading file {file_path}: {e}")  # ✅ Logs file errors
        return None

def scan_files(directory, progress_bar, result_listbox):
    """Scan files for malware, updating UI efficiently."""
    
    if not MALICIOUS_HASHES:
        messagebox.showerror("Error", "Malware hash database is empty!")
        return []

    infected_files = []
    total_files = sum(len(files) for _, _, files in os.walk(directory))
    scanned_files = 0
    update_threshold = max(1, total_files // 50)  # ✅ Update UI every 2% progress

    result_listbox.delete(0, tk.END)  # ✅ Clear previous results

    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            file_hash = calculate_file_hash(file_path)

            if file_hash and file_hash in MALICIOUS_HASHES:
                malware_name = MALICIOUS_HASHES[file_hash]
                infected_files.append((file_path, malware_name))
                result_listbox.insert(tk.END, f"Infected: {file_path} ({malware_name})")

            # ✅ Optimize progress updates
            scanned_files += 1
            if scanned_files % update_threshold == 0 or scanned_files == total_files:
                progress_bar.set(scanned_files / total_files)
                result_listbox.update_idletasks()  # ✅ Ensures smooth UI updates

    if not infected_files:
        result_listbox.insert(tk.END, "✅ No infected files found.")  # ✅ Clearer message

    progress_bar.set(1)  # ✅ Ensure progress bar reaches 100%
    return infected_files
